// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int            @id @default(autoincrement())
  userName          String         @unique
  hashedPassword    String?
  email             String         @unique
  studentCourses    Course[]       @relation("isStudent")
  staffCourses      Course[]       @relation("isStaff")
  instructorCourses Course[]       @relation("isInstructor")
  isHosting         OfficeHour[]   @relation("isHost")
  isRegistered      Registration[]
  firstName         String?
  lastName          String?
  preferredName     String?
  role              Role           @default(User)
  token             String?
  IssueToken        IssueToken[]
}

enum Role {
  Admin
  User
}

model Course {
  id                 Int                     @id @default(autoincrement())
  title              String
  courseNumber       String
  semester           String
  calendarYear       Int
  code               String                  @unique @db.Char(6)
  students           Account[]               @relation("isStudent")
  courseStaff        Account[]               @relation("isStaff")
  instructors        Account[]               @relation("isInstructor")
  officeHours        OfficeHour[]
  officeHourOptions  OfficeHourTimeOptions[] @relation("isCourseTimeOption")
  topics             Topic[]
  iCalJson           Json?
  iCalJsonCalEvent   Json?
  startRegConstraint Int                     @default(48) //in hours
  endRegConstraint   Int                     @default(2)
  CourseToken        CourseToken[]
  usesTokens         Boolean                 @default(false)
  calendarEvents     CalendarEvent[]
}

model OfficeHourTimeOptions {
  id           Int            @id @default(autoincrement())
  title        String
  duration     Int            @default(10)
  course       Course         @relation("isCourseTimeOption", fields: [courseId], references: [id])
  courseId     Int
  Registration Registration[]
}

model OfficeHour {
  id            Int                 @id @default(autoincrement())
  //startTime      DateTime            @db.Timetz()
  //endTime        DateTime            @db.Timetz()
  startDate     DateTime //@db.Date
  endDate       DateTime //@db.Date
  //timePerStudent Int
  course        Course              @relation(fields: [courseId], references: [id])
  courseId      Int
  location      String
  isRecurring   Boolean
  hosts         Account[]           @relation("isHost")
  isCancelledOn DateTime[]          @db.Date
  isOnDayOfWeek numberToDayOfWeek[] @relation("isOnDayOfWeek")
  registrations Registration[]
  isDeleted     Boolean             @default(false)
  isRemote      Boolean             @default(false)
}

model numberToDayOfWeek {
  dayNumber        Int          @id @unique
  dayOfWeek        String       @unique
  officeHoursOnDay OfficeHour[] @relation("isOnDayOfWeek")
}

model Registration {
  id                     Int                   @id @default(autoincrement())
  startTime              DateTime              @db.Timetz()
  endTime                DateTime              @db.Timetz()
  date                   DateTime              @db.Date
  isCancelled            Boolean               @default(false)
  officeHour             OfficeHour            @relation(fields: [officeHourId], references: [id])
  officeHourId           Int
  account                Account               @relation(fields: [accountId], references: [id])
  accountId              Int
  question               String?
  feedback               String?
  rating                 Int?
  topics                 Topic[]               @relation("withTopics")
  isCancelledStaff       Boolean               @default(false)
  officeHourTimeOptions  OfficeHourTimeOptions @relation(fields: [officeHourTimeOptionId], references: [id])
  officeHourTimeOptionId Int
  isNoShow               Boolean               @default(false)
}

model Topic {
  id            Int            @id @default(autoincrement())
  value         String
  course        Course         @relation(fields: [courseId], references: [id])
  courseId      Int
  registrations Registration[] @relation("withTopics")
}

model CourseToken {
  //relations to the course
  id          Int          @id @default(autoincrement())
  course      Course       @relation(fields: [courseId], references: [id])
  title       String
  description String       @default("")
  courseId    Int
  tokenLimit  Int
  IssueToken  IssueToken[]
}

model IssueToken {
  //relation to student
  id            Int         @id @default(autoincrement())
  datesUsed     DateTime[]
  account       Account     @relation(fields: [accountId], references: [id])
  accountId     Int
  CourseToken   CourseToken @relation(fields: [courseTokenId], references: [id])
  courseTokenId Int
}

model CalendarEvent {
  course         Course   @relation(fields: [courseId], references: [id])
  courseId       Int
  date           DateTime @db.Date()
  title          String   @default("")
  additionalInfo String?
  isCancelled    Boolean  @default(false)
  isRemote       Boolean  @default(false)
  location       String

  @@unique([courseId, date])
}
