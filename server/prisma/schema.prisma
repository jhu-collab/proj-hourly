// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int            @id @default(autoincrement())
  userName          String
  email             String         @unique
  phoneNumber       String?        @unique
  studentCourses    Course[]       @relation("isStudent")
  staffCourses      Course[]       @relation("isStaff")
  instructorCourses Course[]       @relation("isInstructor")
  isHosting         OfficeHour[]   @relation("isHost")
  isRegistered      Registration[]
}

model Course {
  id                     Int            @id @default(autoincrement())
  title                  String
  courseNumber           String
  semester               String
  calendarYear           Int
  code                   String         @unique @db.Char(6)
  students               Account[]      @relation("isStudent")
  courseStaff            Account[]      @relation("isStaff")
  instructors            Account[]      @relation("isInstructor")
  officeHours            OfficeHour[]
  topics                 Topic[]
  iCalJson               Json?
}

model OfficeHour {
  id             Int                 @id @default(autoincrement())
  startTime      DateTime            @db.Timetz()
  endTime        DateTime            @db.Timetz()
  startDate      DateTime            @db.Date
  endDate        DateTime            @db.Date
  timePerStudent Int
  course         Course              @relation(fields: [courseId], references: [id])
  courseId       Int
  location       String
  isRecurring    Boolean
  hosts          Account[]           @relation("isHost")
  isCancelledOn  DateTime[]          @db.Date
  isOnDayOfWeek  numberToDayOfWeek[] @relation("isOnDayOfWeek")
  registrations  Registration[]
  isDeleted      Boolean
}

model numberToDayOfWeek {
  dayNumber        Int          @id @unique
  dayOfWeek        String       @unique
  officeHoursOnDay OfficeHour[] @relation("isOnDayOfWeek")
}

model Registration {
  id               Int        @id @default(autoincrement())
  startTime        DateTime   @db.Timetz()
  endTime          DateTime   @db.Timetz()
  date             DateTime   @db.Date
  isCancelled      Boolean
  officeHour       OfficeHour @relation(fields: [officeHourId], references: [id])
  officeHourId     Int
  account          Account    @relation(fields: [accountId], references: [id])
  accountId        Int
  question         String?
  feedback         String?
  rating           Int?
  topics           Topic[]    @relation("withTopics")
  isCancelledStaff Boolean
}

model Topic {
  id            Int            @id @default(autoincrement())
  value         String
  course        Course         @relation(fields: [courseId], references: [id])
  courseId      Int
  registrations Registration[] @relation("withTopics")
}
